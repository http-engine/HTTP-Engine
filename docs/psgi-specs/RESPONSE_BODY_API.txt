Problem
-------

PSGI will expect the application to return status, header and body.

There's a place for discussion how to return back body from the
application to PSGI driver. It SHOULD be easy enough in the case of
just returning the content as a string, but also SHOULD be flexible
enough to support streaming (server-push) and filehandle-like object
to save memory when serving a large file.

Assumption
----------

Application should be able to return the content body in a variety of
ways to enable the simplicity as well as the flexibility.

Here's what we can think of:

#1. Plain string(s)

  sub simple_app {
      my $env = shift;
      return [
          200,
          { 'Content-Type' => 'text/plain' },
          [ "Hello World" ],
      ];
  }

#2. Filehandle

  sub serve_file_app {
      my $env = shift;
      open my $fh, "<", "/path/to/video.mp4";
      return [
          200,
          { 'Content-Type' => "video/mp4", 'Content-Length' => -s $fh },
          $fh,
      ];
  }

#3. Custom object that behaves like "iterable"

  sub streaming_app {
      my $env = shift;
      my $streamer = Streamer->new; 
      return [
          200,
          { 'Content-Type' => "text/html" },
          $streamer,
      ];
  }

  package Streamer;
  sub next {
      # return undef when done, etc.
  }

#4: Generator-like callbacks

  sub generator_app {
      my $env = shift;
      my $i = 0;
      my $generator = sub {
          return if $i++ > 10; # done
          return "Hello $i";
      };
      return [
          200,
          { 'Content-Type' => "text/html" },
          $generator,
      ];
  }

The question here is which of these four we should require
implementors to support. The PSGI implementation code would
be:

  # $env is the big hash that contains everything
  # $app is a code ref that runs the application
  my($status, $header, $body) = $app->($env);

  # read $body to response
  # print to STDOUT in CGI, or with $r->print in mod_perl etc.

So if there's an unified way to read content from $body transparently,
that makes the implementors require code smaller and hence less buggy.

Comparisons with other languages
--------------------------------

Python WSGI:
http://www.python.org/dev/peps/pep-0333/

  When called by the server, the application object must return an
  iterable yielding zero or more strings. This can be accomplished in a
  variety of ways, such as by returning a list of strings, or by the
  application being a generator function that yields strings, or by the
  application being a class whose instances are iterable. Regardless of
  how it is accomplished, the application object must always return an
  iterable yielding zero or more strings.

In Python, the following objects can be treated as a iterable object in the same way:

  * a list of strings (#1)
  * a built-in file object (#2)
  * a class that implements iterable (#3)
  * a generator that yield strings (#4)

So all of four methods can be handled in the same way. Very clean.

Python pre-2.2 doesn't have generators, and built-in file object doesn't behave like an iterable object.
http://www.python.org/dev/peps/pep-0333/#supporting-older-2-2-versions-of-python

Ruby Rack:
http://rack.rubyforge.org/doc/SPEC.html

  The Body must respond to each and must only yield String values. The
  Body itself should not be an instance of String, as this will break
  in Ruby 1.9. If the Body responds to close, it will be called after
  iteration. If the Body responds to to_path, it must return a String
  identifying the location of a file whose contents are identical to
  that produced by calling each; this may be used by the server as an
  alternative, possibly more efficient way to transport the
  response. The Body commonly is an Array of Strings, the application
  instance itself, or a File-like object.

Everything is object in Ruby, so:

  * a list of strings (#1)
  * a File object (#2)
  * an object of a class that implements Iterator as each (#3)
  * anonymous class object that implements .each (#4)

four methods can all be handled as an iterator. Again, very clean.

I'm not sure why Rack has a hook to call to_path in Body since the
built-in I/O stream work as an Iterator anyway. Maybe some
compatibility issues with old Ruby?


JavaScript JSGI
http://jackjs.org/jsgi-spec.html

  The Body must respond to forEach and must only yield objects which
  have a toByteString method (including Strings and Binary
  objects). If the Body responds to close, it will be called after
  iteration. The Body commonly is an array of Strings or ByteStrings.

Array is a first class object, and object is prototype-based, so:

  * an array of strings (#1)
  * an object of a class that implements forEach() (#3)
  * an object that has forEach (#4)

Generators can be used using Prototype based OO pretty easily. An
Array reacts to forEach, so there doesn't need to be distincts between
native array types and objects. There's no File I/O in browser based
JavaScripts so lack of File objects (#2) doesn't reall matter.


Perl Solutions
--------------

Unfortunately Perl doesn't have iterators nor first-class built-in types.

a) We do have a hook to turn objects to behave like a file handle: tie (TIEHANDLE)

b) We do have a hook to turn objects to behave like an array: tie (TIEARRAY)

c) We do have an API to implement File-like objects: IO::Handle

d) We do have an extension to handle built-in types as an object: autobox + autobox::Core

Observations
------------

a) Can everything be handled as a filehandle?

An array ref of a string doesn't behave like a filehandle, so the app
should use PerlIO or IO::Scalar-like thing:

  my $body = "Hello World";
  open my $fh, "<", \$body;
  return [ ...., $body ];

Also, if you want to implement objects that behave like a filehandle, you should use tie.

This is both awkward,

b) Can everything be handled as an array?

The simplest case of an array ref might work. But otherwise filehandles or custom classed
are required to implement TIEARRAY etc. This is not acceptable.

c) Can everything be handled as an IO::Handle object?

Same as a).

d) Can everything be handled as an object?

If autobox::Core is in use, the implementor can do this:

  my($status, $header, $body) = $app->($env);
  # ...
  $body->foreach(sub { $res->print($_[0]) });

to support both array ref (#1) and custom objects that corresponds to
foreach() (#3). It still doesn't work with built-in IO::Handle
objects, though.

Conclusion
----------

There doesn't seem to be a single, clean way to handle everything
(array ref of strings, filehandle object, iterable classes and
generator functions) with duck typing in Perl without any
transformation happening in the middle.

So something should be done in between, either in application or PSGI
implementation. We think this normalization MUST happen in the PSGI
implementation, but an application MAY also do it, so the middleware
chaining etc. can be implemented easier, but that's not a requirement.

So, let's assume we let the body object be either an array ref (#1),
filehandle (#2) or or an object that reacts to foreach() method and
optionally close() method (#3) which is called by PSGI implementor if
it's there, or a generator-like coderef (#4).

The imaginary implementor code that prints body to STDOUT would be:

  my($status, $header, $body) = $app->($env);

  my $cb = sub { print STDOUT $_[0] };

  if (ref $body eq 'ARRAY') {
      for my $line (@$body) {
          $cb->($line);
      }
  } elsif ($body->can('getline')) {
      while (defined(my $line = $body->getline)) {
          $cb->($line);
      }
      $body->close if $body->can('close');
  } elsif (ref $body eq 'CODE') {
      while (defined(my $line = $body->())) {
          $cb->($line);
      }
  } else {
      $body->foreach($cb);
      $body->close if $body->can('close');
  }

This is very simple yet a little tedious to write. We could provide
some helper utilities that does exactly and absolutely this without
ANY dependencies, and recommend implmentors to include it, like:

  use PSGI::Util;

  my($status, $header, $body) = $app->($env);
  PSGI::Util::read_body($body, sub { print STDOUT $_[0] });

Of course, the implementors have an option not to use PSGI::Util and
do their own to handle reading from these $body variables for
performance etc.

Actually, the laziest implementor would also be able to (but not
recommended to) do:

  use autobox::Core;
  sub autobox::Core::CODE::foreach {
      while (defined(my $line = $_[0]->())) { $_[1]->($line) }
  }
  sub IO::Handle::foreach {
      while (defined(my $line = $_[0]->getline)) { $_[1]->($line) }
  }

  my($status, $header, $body) = $app->($env);

  # thanks to autobox and IO::Handle magic, everything now duck types
  $body->foreach(sub { print STDOUT $_[0] });

